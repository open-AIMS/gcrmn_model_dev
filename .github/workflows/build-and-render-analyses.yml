name: Build and render analyses

on:
  workflow_dispatch:
#  pull_request:
#  push:
#    branches: ['release']

jobs:
  build-analyses:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    name: ${{ matrix.config.r }}

    strategy:
      fail-fast: false
      matrix:
        config:
        - { r: '4.4.1' }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0  # ensure that more than the last commit is checked out so that we can get time stamps
      # Restore the timestamps - I am going to try to use these to work out what is new and what is not    
      - name: Restore Timestamps
        uses: chetan/git-restore-mtime-action@v1

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev make libgsl-dev

      # install graphviz
      - name: Install Graphviz
        run: sudo apt-get install graphviz

      # install R
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.R }}

      - name: Repos
        run: |
          cat("\noptions(repos=c(stan='https://mc-stan.org/r-packages/',CRAN ='https://cloud.r-project.org'))\n", file = "~/.Rprofile", append = TRUE)
        shell: Rscript {0}
        
      ## Install R packages
      - name: install R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 2
          needs: true
          packages: |
            any::rmarkdown
            any::quarto
            any::tidyverse
            any::sf
            any::DHARMa
            any::glmmTMB
            any::patchwork
            any::brms
            any::knitr
            any::simstudy
            any::HDInterval
            any::rstan
            any::bayesplot
            any::gbm
            any::dbarts
            any::posterior
            any::remotes
            any::targets
            any::tarchetypes
            any::tidybayes
            any::graph
            any::Rgraphviz
            any::emmeans
            any::gridGraphics
            any::reticulate
            stan-dev/cmdstanr
            jmgirard/standist

      - name: Install INLA
        run: |
          Rscript -e "install.packages('INLA',repos=c(getOption('repos'),INLA='https://inla.r-inla-download.org/R/stable'), dep=TRUE)"
          Rscript -e "remotes::install_github('jmgirard/standist')"
          Rscript -e "remotes::install_github('open-AIMS/synthos')"

      - name: Cache CmdStan installation
        uses: actions/cache@v4
        with:
          path: ~/.cmdstan
          key: cmdstan-${{ runner.os }}-${{ hashFiles('**/DESCRIPTION') }}-v1
          restore-keys: |
            cmdstan-${{ runner.os }}-
      
      - name: Install CmdStan
        shell: Rscript {0}
        run: |
          if (!requireNamespace("cmdstanr", quietly = TRUE)) {
            remotes::install_github("stan-dev/cmdstanr")
          }
          #if (!cmdstanr::cmdstan_version(FALSE)) {
          if (requireNamespace("cmdstanr", quietly = TRUE)) {
            cmdstanr::check_cmdstan_toolchain(fix = TRUE)
            cmdstanr::install_cmdstan(cores = parallel::detectCores())
            cmdstanr:::get_cmdstan_flags("STANCFLAGS")
            cmdstanr::cmdstanr_example()
          } else {
            message("CmdStan already installed at: ", cmdstanr::cmdstan_path())
          }
          
      # install quarto
      - name: Install quarto
        uses: quarto-dev/quarto-actions/setup@v2
      - name: Change ImageMagick policy to allow pdf->png conversion.
        run: |
          sudo sed -i 's/^.*policy.*coder.*none.*PDF.*//' /etc/ImageMagick-6/policy.xml

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Or 3.10/3.9 â€” match your local setup

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pymc numpy arviz preliz pymc_bart seaborn

      - name: Cache targets and output
        uses: actions/cache@v4
        with:
          path: |
            R/_targets
            data
            output/figures
          key: targets-cache-${{ hashFiles('**/*.RData', '**/*.rds') }}
          restore-keys: |
            targets-cache-

      # Step 2: Download the artifact (if it exists)
      #- name: Download _targets artifact
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: _targets
      #    path: R/_targets
      #  continue-on-error: true  # Continue even if the artifact doesn't exist

      # Run R
      - name: Run R
        run: |
          make -i run_R

      # Run Render
      - name: Run R
        run: |
          make -i render_docs

      # Step 4: Upload the _targets folder as an artifact
      #- name: Upload _targets artifact
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: _targets
      #    path: R/_targets

      # Deploy site to gh-pages branch
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages
          folder: docs